@page "/"
@using Funda.Exceptions;
@using Funda.Models;
@using System.Diagnostics;
@using Funda.Services.Interfaces;

<PageTitle>Index</PageTitle>

<div class="flex flex-row h-64 justify-center items-end">
    <select class="select w-full max-w-xs" @bind="_selectedOption">
        <option value="@TopBrokersOption" selected>Top 10 Makelaars</option>
        <option value="@TopBrokersWithTuinOption">Top 10 Makelaars with tuin objects</option>
    </select>

    <button class="btn ml-10" @onclick="Calculate">Calculate</button>
</div>


<div class="flex flex-1 justify-center mt-20">
    @if(!string.IsNullOrEmpty(_errorMessage))
    {
        <h1>@_errorMessage</h1>
    }
    else if(_topBrokers?.Count > 0)
    {
        <div class="overflow-x-auto">
            <table class="table">
                <thead>
                    <tr>
                        <th></th>
                        <th>Broker Name</th>
                        <th>Number of objects in sale</th>
                    </tr>
                </thead>
                <tbody>
                    @{var index = 1;}

                    @foreach (var broker in _topBrokers)
                    {
                        <tr>
                            <th>@index</th>
                            <td>@broker.Key</td>
                            <td>@broker.Value</td>
                        </tr>

                        index++;
                    }
                </tbody>
            </table>
        </div>
    }
    else if (_progress > 0)
    {
        <div class="radial-progress text-primary" style="--value:@_progress;">@($"{_progress}%")</div>
    }
</div>


@code {
    @inject IFundaStat _fundaStat;

    private const string TopBrokersOption = "topBrokers";
    private const string TopBrokersWithTuinOption = "topBrokersWithTuin";

    private string _errorMessage;
    private string _selectedOption = TopBrokersOption;
    private int _progress;
    private Dictionary<string, int> _topBrokers;

    private async void Calculate()
    {
        _errorMessage = "";
        _progress = 0;
        _topBrokers = new Dictionary<string, int>();

        try
        {
            var withTuin = _selectedOption == TopBrokersWithTuinOption;
            _topBrokers = await _fundaStat.GetTopBrokers("amsterdam", withTuin, UpdateProgress);
        }
        catch(RetryLimitExceededException)
        {
            _errorMessage = "It took longer than expected :( Please try again later.";
        }

        StateHasChanged();
    }

    private void UpdateProgress(int progress)
    {
        _progress = progress;
        StateHasChanged();
    }
}
