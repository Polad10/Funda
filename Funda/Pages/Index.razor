@page "/"
@using Funda.Models;
@using System.Diagnostics;

<PageTitle>Index</PageTitle>

<div class="flex flex-row h-64 justify-center items-end">
    <select class="select w-full max-w-xs" @bind="selectedOption">
        <option value="@TopBrokersOption" selected>Top 10 Makelaars</option>
        <option value="@TopBrokersWithTuinOption">Top 10 Makelaars with tuin objects</option>
    </select>

    <button class="btn ml-10" @onclick="Calculate">Calculate</button>
</div>


<div class="flex flex-1 justify-center mt-20">
    @if(topBrokers?.Count > 0)
{
        <div class="overflow-x-auto">
            <table class="table">
            <thead>
                <tr>
                    <th></th>
                    <th>Broker Name</th>
                    <th>Number of objects in sale</th>
                </tr>
            </thead>
            <tbody>
                @{var index = 1;}

                @foreach (var broker in topBrokers)
                {
                    <tr>
                        <th>@index</th>
                        <td>@broker.Key</td>
                        <td>@broker.Value</td>
                    </tr>

                    index++;
                }
            </tbody>
        </table>
    </div>
}
else if (percentageCompleted > 0)
{
    <div class="radial-progress text-primary" style="--value:@percentageCompleted;">@($"{percentageCompleted}%")</div>
}
</div>


@code {
    private const string TopBrokersOption = "topBrokers";
    private const string TopBrokersWithTuinOption = "topBrokersWithTuin";

    private string selectedOption = TopBrokersOption;
    private int pageNr;
    private int percentageCompleted;
    private Dictionary<string, int> topBrokers;

    private async void Calculate()
    {
        pageNr = 0;
        percentageCompleted = 0;
        topBrokers = selectedOption == TopBrokersOption ? await GetTopBrokers(withTuin: false) : await GetTopBrokers(withTuin: true);

        StateHasChanged();
    }

    private async Task<Dictionary<string, int>> GetTopBrokers(bool withTuin, int top = 10)
    {
        var saleObjects = await GetSaleObjects(withTuin);

        var brokerSaleObjects = saleObjects.GroupBy(s => s.BrokerName);
        var orderedBrokerSaleObjects = brokerSaleObjects.OrderByDescending(group => group.Count());

        return orderedBrokerSaleObjects.Take(top).ToDictionary(group => group.Key, group => group.Count());
    } 

    private async Task<List<SaleObject>> GetSaleObjects(bool withTuin = false)
    {
        var baseUrl = "http://partnerapi.funda.nl/feeds/Aanbod.svc/json/ac1b0b1572524640a0ecc54de453ea9f/?type=koop&zo=/amsterdam/";

        if(withTuin)
        {
            baseUrl = $"{baseUrl}/tuin/";
        }

        var saleObjects = new List<SaleObject>();

        using (var client = new HttpClient())
        {
            SalesData salesData = null;

            do
            {
                try
                {
                    pageNr++;
                    var url = $"{baseUrl}&page={pageNr}&pagesize=25";
                    salesData = await client.GetFromJsonAsync<SalesData>(url);

                    saleObjects.AddRange(salesData.SaleObjects);

                    percentageCompleted = (pageNr * 100) / salesData.Paging.TotalPages;
                    StateHasChanged();
                }
                catch (HttpRequestException)
                {
                    await Task.Delay(5000);
                }
            } while ((pageNr < salesData.Paging.TotalPages));
        }

        return saleObjects;
    }
}
